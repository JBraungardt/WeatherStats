# weather

```elixir
Mix.install([
  {:kino, "~> 0.9"},
  {:jason, "~> 1.4"},
  {:kino_vega_lite, "~> 0.1"}
])
```

## Data

```elixir
data =
  File.read!("F:/Git/WeatherStats/data/bremen_stats.json")
  |> Jason.decode!(keys: :atoms)
```

```elixir
# data_text = Kino.Input.textarea("weather data")
```

```elixir
# data = Jason.decode!(Kino.Input.read(data_text), keys: :atoms)
```

## Filter

```elixir
month = Kino.Input.text("month")
```

```elixir
m = Kino.Input.read(month)

res =
  data
  |> Enum.filter(fn month ->
    month.date |> String.ends_with?(m)
  end)
  |> Enum.map(fn month ->
    %{year: month.date |> String.split("-") |> hd(), temp: month.avg_temp}
  end)
```

## Show

```elixir
Kino.DataTable.new(res)
```

<!-- livebook:{"attrs":"eyJjaGFydF90aXRsZSI6bnVsbCwiaGVpZ2h0Ijo0MDAsImxheWVycyI6W3siYWN0aXZlIjp0cnVlLCJjaGFydF90eXBlIjoicG9pbnQiLCJjb2xvcl9maWVsZCI6bnVsbCwiY29sb3JfZmllbGRfYWdncmVnYXRlIjpudWxsLCJjb2xvcl9maWVsZF9iaW4iOmZhbHNlLCJjb2xvcl9maWVsZF9zY2FsZV9zY2hlbWUiOm51bGwsImNvbG9yX2ZpZWxkX3R5cGUiOm51bGwsImRhdGFfdmFyaWFibGUiOiJyZXMiLCJnZW9kYXRhX2NvbG9yIjoiYmx1ZSIsImxhdGl0dWRlX2ZpZWxkIjpudWxsLCJsb25naXR1ZGVfZmllbGQiOm51bGwsInhfZmllbGQiOiJ5ZWFyIiwieF9maWVsZF9hZ2dyZWdhdGUiOm51bGwsInhfZmllbGRfYmluIjpmYWxzZSwieF9maWVsZF9zY2FsZV90eXBlIjpudWxsLCJ4X2ZpZWxkX3R5cGUiOiJ0ZW1wb3JhbCIsInlfZmllbGQiOiJ0ZW1wIiwieV9maWVsZF9hZ2dyZWdhdGUiOm51bGwsInlfZmllbGRfYmluIjpmYWxzZSwieV9maWVsZF9zY2FsZV90eXBlIjpudWxsLCJ5X2ZpZWxkX3R5cGUiOiJxdWFudGl0YXRpdmUifV0sInZsX2FsaWFzIjoiRWxpeGlyLlZlZ2FMaXRlIiwid2lkdGgiOjgwMH0","chunks":null,"kind":"Elixir.KinoVegaLite.ChartCell","livebook_object":"smart_cell"} -->

```elixir
VegaLite.new(width: 800, height: 400)
|> VegaLite.data_from_values(res, only: ["year", "temp"])
|> VegaLite.mark(:point)
|> VegaLite.encode_field(:x, "year", type: :temporal)
|> VegaLite.encode_field(:y, "temp", type: :quantitative)
```

<!-- livebook:{"branch_parent_index":0} -->

## Day

```elixir
res =
  data =
  File.read!("F:/Git/WeatherStats/data/bremen.json")
  |> Jason.decode!(keys: :atoms)
  |> Enum.filter(fn entry ->
    entry.date
    |> String.ends_with?(
      "#{String.pad_leading(DateTime.utc_now().month |> Integer.to_string(), 2, "0")}-#{String.pad_leading(DateTime.utc_now().day |> Integer.to_string(), 2, "0")}"
    )
  end)
  |> Enum.map(fn day ->
    %{year: day.date |> String.split("-") |> hd(), temp: day.avg_temp}
  end)

res
|> Enum.min_max()
```

```elixir
Kino.DataTable.new(res)
```

```elixir
VegaLite.new(width: 800, height: 400)
|> VegaLite.data_from_values(res, only: ["year", "temp"])
|> VegaLite.mark(:point)
|> VegaLite.encode_field(:x, "year", type: :temporal)
|> VegaLite.encode_field(:y, "temp", type: :quantitative)
```

```elixir
data =
  File.read!("F:/Git/WeatherStats/data/bremen.json")
  |> Jason.decode!(keys: :atoms)

res =
  1..Calendar.ISO.days_in_month(2022, DateTime.utc_now().month)
  |> Enum.map(fn day ->
    day_data =
      data
      |> Enum.filter(fn entry ->
        entry.date
        |> String.match?(
          ~r/20\d\d-#{String.pad_leading("#{DateTime.utc_now().month}", 2, "0")}-#{String.pad_leading("#{day}", 2, "0")}/
        )
      end)

    avg_temp =
      (Enum.reduce(day_data, 0, fn entry, acc -> acc + entry.avg_temp end) / length(day_data))
      |> Float.round(1)

    %{day: day, temp: avg_temp}
  end)
```

<!-- livebook:{"attrs":"eyJjaGFydF90aXRsZSI6bnVsbCwiaGVpZ2h0Ijo0MDAsImxheWVycyI6W3siYWN0aXZlIjp0cnVlLCJjaGFydF90eXBlIjoiYmFyIiwiY29sb3JfZmllbGQiOm51bGwsImNvbG9yX2ZpZWxkX2FnZ3JlZ2F0ZSI6bnVsbCwiY29sb3JfZmllbGRfYmluIjpmYWxzZSwiY29sb3JfZmllbGRfc2NhbGVfc2NoZW1lIjpudWxsLCJjb2xvcl9maWVsZF90eXBlIjpudWxsLCJkYXRhX3ZhcmlhYmxlIjoicmVzIiwiZ2VvZGF0YV9jb2xvciI6ImJsdWUiLCJsYXRpdHVkZV9maWVsZCI6bnVsbCwibG9uZ2l0dWRlX2ZpZWxkIjpudWxsLCJ4X2ZpZWxkIjoiZGF5IiwieF9maWVsZF9hZ2dyZWdhdGUiOm51bGwsInhfZmllbGRfYmluIjpmYWxzZSwieF9maWVsZF9zY2FsZV90eXBlIjpudWxsLCJ4X2ZpZWxkX3R5cGUiOiJxdWFudGl0YXRpdmUiLCJ5X2ZpZWxkIjoidGVtcCIsInlfZmllbGRfYWdncmVnYXRlIjpudWxsLCJ5X2ZpZWxkX2JpbiI6ZmFsc2UsInlfZmllbGRfc2NhbGVfdHlwZSI6bnVsbCwieV9maWVsZF90eXBlIjoicXVhbnRpdGF0aXZlIn1dLCJ2bF9hbGlhcyI6IkVsaXhpci5WZWdhTGl0ZSIsIndpZHRoIjo4MDB9","chunks":null,"kind":"Elixir.KinoVegaLite.ChartCell","livebook_object":"smart_cell"} -->

```elixir
VegaLite.new(width: 800, height: 400)
|> VegaLite.data_from_values(res, only: ["day", "temp"])
|> VegaLite.mark(:bar)
|> VegaLite.encode_field(:x, "day", type: :quantitative)
|> VegaLite.encode_field(:y, "temp", type: :quantitative)
```

<!-- livebook:{"branch_parent_index":0} -->

## Month running

```elixir
data =
  File.read!("F:/Git/WeatherStats/data/bremen.json")
  |> Jason.decode!(keys: :atoms)

days =
  1..DateTime.utc_now().day
  |> Enum.map(&String.pad_leading("#{&1}", 2, "0"))
  |> Enum.join("|")

days_data =
  data
  |> Enum.filter(fn entry ->
    entry.date
    |> String.match?(
      ~r/20\d\d-#{String.pad_leading("#{DateTime.utc_now().month}", 2, "0")}-(#{days})/
    )
  end)

(Enum.reduce(days_data, 0, fn day, acc ->
   acc + day.avg_temp
 end) / length(days_data))
|> Float.round(1)
```

```elixir
hb =
  File.read!("../WeatherStats/data/bremen.json")
  |> Jason.decode!(keys: :atoms)
  |> Enum.filter(fn entry ->
    entry.date
    |> String.starts_with?("2024-12")
  end)
  |> Enum.map(&%{day: &1.date |> String.split("-") |> List.last(), sun: &1.sun, loc: "hb"})

sw =
  File.read!("../WeatherStats/data/schweinfurt.json")
  |> Jason.decode!(keys: :atoms)
  |> Enum.filter(fn entry ->
    entry.date
    |> String.starts_with?("2024-12")
  end)
  |> Enum.map(&%{day: &1.date |> String.split("-") |> List.last(), sun: &1.sun, loc: "sw"})

sun_data = hb ++ sw
```

```elixir
VegaLite.new(widht: [step: 31])
|> VegaLite.data_from_values(sun_data, only: ["day", "sun", "loc"])
|> VegaLite.mark(:bar)
|> VegaLite.encode_field(:column, "day", type: :ordinal, spacing: 1)
|> VegaLite.encode_field(:y, "sun", type: :quantitative)
|> VegaLite.encode_field(:x, "loc", title: nil)
|> VegaLite.encode_field(:color, "loc")
```
